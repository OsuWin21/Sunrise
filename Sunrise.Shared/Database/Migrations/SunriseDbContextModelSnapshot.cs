// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sunrise.Shared.Database;

#nullable disable

namespace Sunrise.Shared.Database.Migrations
{
    [DbContext(typeof(SunriseDbContext))]
    partial class SunriseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Sunrise.Shared.Database.Models.BeatmapFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeatmapId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeatmapSetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId")
                        .IsUnique();

                    b.HasIndex("BeatmapSetId");

                    b.ToTable("beatmap_file");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Events.EventUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Ip");

                    b.HasIndex("UserId");

                    b.HasIndex("EventType", "UserId");

                    b.ToTable("event_user");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Medal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileUrl")
                        .HasColumnType("TEXT");

                    b.Property<byte?>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("FileId");

                    b.HasIndex("GameMode");

                    b.ToTable("medal");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.MedalFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("medal_file");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("UserId");

                    b.ToTable("restriction");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<string>("BeatmapHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BeatmapId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeatmapStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ClientTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count100")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count300")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count50")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountGeki")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountKatu")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountMiss")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsScoreable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mods")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OsuVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Perfect")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PerformancePoints")
                        .HasColumnType("REAL");

                    b.Property<int?>("ReplayFileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScoreHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubmissionStatus")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalScore")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WhenPlayed")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId");

                    b.HasIndex("BeatmapStatus");

                    b.HasIndex("GameMode");

                    b.HasIndex("Mods");

                    b.HasIndex("PerformancePoints");

                    b.HasIndex("ReplayFileId");

                    b.HasIndex("SubmissionStatus");

                    b.HasIndex("TotalScore");

                    b.HasIndex("UserId");

                    b.ToTable("score");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Country")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Friends")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastOnlineTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Passhash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Privilege")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SilencedUntil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatus");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserFavouriteBeatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeatmapSetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapSetId");

                    b.HasIndex("UserId");

                    b.ToTable("user_favourite_beatmap");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Type");

                    b.ToTable("user_file");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserMedals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedalId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_medals");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<long?>("BestCountryRank")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("BestCountryRankDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("BestGlobalRank")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("BestGlobalRankDate")
                        .HasColumnType("TEXT");

                    b.Property<byte>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PerformancePoints")
                        .HasColumnType("REAL");

                    b.Property<int>("PlayCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RankedScore")
                        .HasColumnType("BIGINT");

                    b.Property<int>("TotalHits")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalScore")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameMode");

                    b.HasIndex("UserId");

                    b.ToTable("user_stats");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserStatsSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SnapshotsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "GameMode");

                    b.ToTable("user_stats_snapshot");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Events.EventUser", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Medal", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.MedalFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Restriction", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Score", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.UserFile", "ReplayFile")
                        .WithMany()
                        .HasForeignKey("ReplayFileId");

                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserFavouriteBeatmap", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserFile", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserMedals", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserStats", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sunrise.Shared.Database.Models.Users.UserStatsSnapshot", b =>
                {
                    b.HasOne("Sunrise.Shared.Database.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
